// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigRequest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TeamNote.Protocol {

  /// <summary>Holder for reflection information generated from ConfigRequest.proto</summary>
  public static partial class ConfigRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for ConfigRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDb25maWdSZXF1ZXN0LnByb3RvIjAKDUNvbmZpZ1JlcXVlc3QSDAoEUG9y",
            "dBgBIAEoBRIRCglTZXJ2aWNlSWQYAiABKAVCFkgBqgIRVGVhbU5vdGUuUHJv",
            "dG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TeamNote.Protocol.ConfigRequest), global::TeamNote.Protocol.ConfigRequest.Parser, new[]{ "Port", "ServiceId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConfigRequest : pb::IMessage<ConfigRequest> {
    private static readonly pb::MessageParser<ConfigRequest> _parser = new pb::MessageParser<ConfigRequest>(() => new ConfigRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeamNote.Protocol.ConfigRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRequest(ConfigRequest other) : this() {
      port_ = other.port_;
      serviceId_ = other.serviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigRequest Clone() {
      return new ConfigRequest(this);
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 1;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "ServiceId" field.</summary>
    public const int ServiceIdFieldNumber = 2;
    private int serviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (ServiceId != other.ServiceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServiceId != 0) hash ^= ServiceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Port);
      }
      if (ServiceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServiceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigRequest other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServiceId != 0) {
        ServiceId = other.ServiceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Port = input.ReadInt32();
            break;
          }
          case 16: {
            ServiceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
