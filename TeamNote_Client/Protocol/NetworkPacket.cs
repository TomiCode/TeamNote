// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkPacket.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TeamNote.Protocol {

  /// <summary>Holder for reflection information generated from NetworkPacket.proto</summary>
  public static partial class NetworkPacketReflection {

    #region Descriptor
    /// <summary>File descriptor for NetworkPacket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkPacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNOZXR3b3JrUGFja2V0LnByb3RvImMKDU5ldHdvcmtQYWNrZXQSDAoEVHlw",
            "ZRgBIAEoBRIQCghDbGllbnRJZBgCIAEoAxIOCgZTZXJ2ZXIYAyABKAgSEQoJ",
            "RW5jcnlwdGVkGAQgASgIEg8KB01lc3NhZ2UYBSABKAxCFkgBqgIRVGVhbU5v",
            "dGUuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TeamNote.Protocol.NetworkPacket), global::TeamNote.Protocol.NetworkPacket.Parser, new[]{ "Type", "ClientId", "Server", "Encrypted", "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NetworkPacket : pb::IMessage<NetworkPacket> {
    private static readonly pb::MessageParser<NetworkPacket> _parser = new pb::MessageParser<NetworkPacket>(() => new NetworkPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeamNote.Protocol.NetworkPacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPacket(NetworkPacket other) : this() {
      type_ = other.type_;
      clientId_ = other.clientId_;
      server_ = other.server_;
      encrypted_ = other.encrypted_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPacket Clone() {
      return new NetworkPacket(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ClientId" field.</summary>
    public const int ClientIdFieldNumber = 2;
    private long clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "Server" field.</summary>
    public const int ServerFieldNumber = 3;
    private bool server_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "Encrypted" field.</summary>
    public const int EncryptedFieldNumber = 4;
    private bool encrypted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Encrypted {
      get { return encrypted_; }
      set {
        encrypted_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 5;
    private pb::ByteString message_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ClientId != other.ClientId) return false;
      if (Server != other.Server) return false;
      if (Encrypted != other.Encrypted) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ClientId != 0L) hash ^= ClientId.GetHashCode();
      if (Server != false) hash ^= Server.GetHashCode();
      if (Encrypted != false) hash ^= Encrypted.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ClientId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ClientId);
      }
      if (Server != false) {
        output.WriteRawTag(24);
        output.WriteBool(Server);
      }
      if (Encrypted != false) {
        output.WriteRawTag(32);
        output.WriteBool(Encrypted);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ClientId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientId);
      }
      if (Server != false) {
        size += 1 + 1;
      }
      if (Encrypted != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkPacket other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ClientId != 0L) {
        ClientId = other.ClientId;
      }
      if (other.Server != false) {
        Server = other.Server;
      }
      if (other.Encrypted != false) {
        Encrypted = other.Encrypted;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ClientId = input.ReadInt64();
            break;
          }
          case 24: {
            Server = input.ReadBool();
            break;
          }
          case 32: {
            Encrypted = input.ReadBool();
            break;
          }
          case 42: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
