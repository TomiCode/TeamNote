// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublicKey.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TeamNote.Protocol {

  /// <summary>Holder for reflection information generated from PublicKey.proto</summary>
  public static partial class PublicKeyReflection {

    #region Descriptor
    /// <summary>File descriptor for PublicKey.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PublicKeyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9QdWJsaWNLZXkucHJvdG8iLgoJUHVibGljS2V5Eg8KB01vZHVsdXMYASAB",
            "KAwSEAoIRXhwb25lbnQYAiABKAxCFkgBqgIRVGVhbU5vdGUuUHJvdG9jb2xi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TeamNote.Protocol.PublicKey), global::TeamNote.Protocol.PublicKey.Parser, new[]{ "Modulus", "Exponent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PublicKey : pb::IMessage<PublicKey> {
    private static readonly pb::MessageParser<PublicKey> _parser = new pb::MessageParser<PublicKey>(() => new PublicKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TeamNote.Protocol.PublicKeyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKey(PublicKey other) : this() {
      modulus_ = other.modulus_;
      exponent_ = other.exponent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKey Clone() {
      return new PublicKey(this);
    }

    /// <summary>Field number for the "Modulus" field.</summary>
    public const int ModulusFieldNumber = 1;
    private pb::ByteString modulus_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Modulus {
      get { return modulus_; }
      set {
        modulus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Exponent" field.</summary>
    public const int ExponentFieldNumber = 2;
    private pb::ByteString exponent_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Exponent {
      get { return exponent_; }
      set {
        exponent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Modulus != other.Modulus) return false;
      if (Exponent != other.Exponent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Modulus.Length != 0) hash ^= Modulus.GetHashCode();
      if (Exponent.Length != 0) hash ^= Exponent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Modulus.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Modulus);
      }
      if (Exponent.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Exponent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Modulus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Modulus);
      }
      if (Exponent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Exponent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicKey other) {
      if (other == null) {
        return;
      }
      if (other.Modulus.Length != 0) {
        Modulus = other.Modulus;
      }
      if (other.Exponent.Length != 0) {
        Exponent = other.Exponent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Modulus = input.ReadBytes();
            break;
          }
          case 18: {
            Exponent = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
